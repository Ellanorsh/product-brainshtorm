from flask import Flask, request, jsonify, render_template_string
from openai import OpenAI
import os

app = Flask(__name__)
client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

bots = [
    {
        "bot_name": "ü§ì –í–∏–∫–∞",
        "instruction": "–¢—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –Ω–∞–π—Ç–∏ –ø–æ–¥–∫—Ä–µ–ø–ª—è—é—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª–∏—Ç —É–ª—É—á—à–∏—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é –≥–∏–ø–æ—Ç–µ–∑—É."
    },
    {
        "bot_name": "üïµÔ∏è‚Äç‚ôÄÔ∏è –ù–∞—Å—Ç—è",
        "instruction": "–¢—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —Å –ø–æ—Ö–æ–∂–µ–π —Ñ—É–Ω–∫—Ü–∏–µ–π, –æ–ø–∏—Å–∞—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏."
    },
    {
        "bot_name": "üë®‚Äçüíª –ê—Ä—Ç—É—Ä",
        "instruction": "–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ª–∏–¥–µ—Ä. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∞–ª–∏–∑—É–µ–º–æ—Å—Ç—å, —Ä–µ—Å—É—Ä—Å—ã –∏ —Ä–æ–ª–∏."
    },
    {
        "bot_name": "üîç –°–≤–∞—Ç–∏",
        "instruction": "–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –ü—Ä–æ–¥—É–º–∞–π –∫–æ—Ä–Ω–µ—Ä-–∫–µ–π—Å—ã –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏."
    },
    {
        "bot_name": "üìÖ –õ–µ–Ω–∞",
        "instruction": "–¢—ã –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç—ã –ê—Ä—Ç—É—Ä–∞, –ù–∞—Å—Ç–∏ –∏ –°–≤–∞—Ç–∏ –∏ —Å–æ—Å—Ç–∞–≤—å –¥–≤–∞ –ø–ª–∞–Ω–∞: MVP –∏ full."
    },
    {
        "bot_name": "üß† –î–µ–Ω–∏—Å",
        "instruction": "–¢—ã –≤–µ–¥—É—â–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –î–∞–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—Ü–µ–Ω–∫—É, –ø–æ—á–µ–º—É –∏–¥–µ—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–ª–æ—Ö–æ–π –∏–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞."
    }
]

@app.route("/", methods=["GET"])
def index():
    return render_template_string("""{% raw %}
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>Product Brainstorm</title>
  <style>
    body { font-family: Arial, sans-serif; background: #f4f4f4; margin: 0; padding: 2rem; }
    .container { max-width: 800px; margin: 0 auto; background: white; padding: 2rem; border-radius: 8px; }
    .bot-block { margin-bottom: 2rem; padding: 1rem; background: #f9f9f9; border-left: 4px solid #ccc; border-radius: 4px; position: relative; }
    .bot-name { font-weight: bold; margin-bottom: 0.5rem; }
    .copy-btn { position: absolute; top: 1rem; right: 1rem; background: #eee; border: none; padding: 5px 10px; cursor: pointer; }
    .copy-btn:hover { background: #ddd; }
    #copy-all { margin-top: 1rem; background: #007bff; color: white; border: none; padding: 10px 20px; cursor: pointer; border-radius: 4px; }
    #copy-all:hover { background: #0056b3; }
  </style>
</head>
<body>
  <div class="container">
    <h1>üí° –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤—É—é –∏–¥–µ—é</h1>
    <textarea id="idea" rows="4" style="width:100%;" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é –∑–¥–µ—Å—å..."></textarea><br><br>
    <button onclick="sendIdea()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
    <h2>–û—Ç–≤–µ—Ç—ã –±–æ—Ç–æ–≤:</h2>
    <div id="responses"></div>
    <button id="copy-all" style="display:none;" onclick="copyAll()">üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë</button>
  </div>

  <script>
    const bots = ["ü§ì –í–∏–∫–∞", "üïµÔ∏è‚Äç‚ôÄÔ∏è –ù–∞—Å—Ç—è", "üë®‚Äçüíª –ê—Ä—Ç—É—Ä", "üîç –°–≤–∞—Ç–∏", "üìÖ –õ–µ–Ω–∞", "üß† –î–µ–Ω–∏—Å"];
    let fullText = "";

    async function sendIdea() {
      const idea = document.getElementById("idea").value;
      const responseDiv = document.getElementById("responses");
      const copyAllBtn = document.getElementById("copy-all");
      responseDiv.innerHTML = "";
      copyAllBtn.style.display = "none";
      fullText = `üí° –ó–∞–ø—Ä–æ—Å:\n${idea}\n\n`;

      for (let i = 0; i < bots.length; i++) {
        const botName = bots[i];
        const botBox = document.createElement("div");
        botBox.className = "bot-block";
        botBox.innerHTML = `<div class="bot-name">${botName}</div><pre id="bot-answer-${i}">‚è≥...</pre>`;
        responseDiv.appendChild(botBox);

        try {
          const res = await fetch("/generate_for_bot", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ idea: idea, bot_id: botName })
          });
          const data = await res.json();
          const answer = data.answer || "–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞";
          document.getElementById(`bot-answer-${i}`).innerText = answer;

          const copyBtn = document.createElement("button");
          copyBtn.innerText = "üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å";
          copyBtn.className = "copy-btn";
          copyBtn.onclick = () => {
            navigator.clipboard.writeText(answer).then(() => alert("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!"));
          };
          botBox.appendChild(copyBtn);

          fullText += `${botName}:\n${answer}\n\n`;
        } catch (err) {
          document.getElementById(`bot-answer-${i}`).innerText = "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞";
        }
      }

      window.fullCopyText = fullText.trim();
      copyAllBtn.style.display = "inline-block";
    }

    function copyAll() {
      navigator.clipboard.writeText(window.fullCopyText).then(() => {
        alert("–í—Å–µ –æ—Ç–≤–µ—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!");
      });
    }
  </script>
</body>
</html>
{% endraw %}""")

@app.route("/submit", methods=["POST"])
def submit():
    try:
        data = request.get_json()
        idea = data.get("idea", "").strip()
        if not idea:
            return jsonify({"error": "–ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"})

        responses = []
        artur_resp, nastya_resp, swati_resp = "", "", ""

        for bot in bots:
            instruction = bot["instruction"]
            if bot["bot_name"] == "üìÖ –õ–µ–Ω–∞":
                instruction += (
                    f"\n\n–û—Ç–≤–µ—Ç –ê—Ä—Ç—É—Ä–∞:\n{artur_resp}\n\n"
                    f"–û—Ç–≤–µ—Ç –ù–∞—Å—Ç–∏:\n{nastya_resp}\n\n"
                    f"–û—Ç–≤–µ—Ç –°–≤–∞—Ç–∏:\n{swati_resp}"
                )

            res = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": instruction},
                    {"role": "user", "content": idea}
                ]
            )
            answer = res.choices[0].message.content.strip()
            if bot["bot_name"] == "üë®‚Äçüíª –ê—Ä—Ç—É—Ä":
                artur_resp = answer
            elif bot["bot_name"] == "üïµÔ∏è‚Äç‚ôÄÔ∏è –ù–∞—Å—Ç—è":
                nastya_resp = answer
            elif bot["bot_name"] == "üîç –°–≤–∞—Ç–∏":
                swati_resp = answer

            responses.append({"bot_name": bot["bot_name"], "answer": answer})

        return jsonify(responses)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True)