from flask import Flask, request, jsonify, render_template_string
from openai import OpenAI
import os

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI ---
app = Flask(__name__)
client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

# --- –ë–æ—Ç—ã ---
bots = [
    {
        "bot_name": "ü§ì –í–∏–∫–∞",
        "instruction": "–¢—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å, –Ω–∞–π–¥–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è —É—Å–∏–ª–∏—Ç –≥–∏–ø–æ—Ç–µ–∑—É."
    },
    {
        "bot_name": "üïµÔ∏è‚Äç‚ôÄÔ∏è –ù–∞—Å—Ç—è",
        "instruction": "–¢—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä. –ü–æ–¥–≥–æ—Ç–æ–≤—å —Å–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö/–∫–æ–Ω–∫—É—Ä–∏—Ä—É—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –ø–æ—Ö–æ–∂–µ–π —Ñ–∏—á–µ–π."
    },
    {
        "bot_name": "üë®‚Äçüíª –ê—Ä—Ç—É—Ä",
        "instruction": "–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ª–∏–¥–µ—Ä. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∞–ª–∏–∑—É–µ–º–æ—Å—Ç—å –∏–¥–µ–∏, —Ç—Ä–µ–±—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –Ω—É–∂–Ω—ã–µ —Ä–æ–ª–∏."
    },
    {
        "bot_name": "üîç –°–≤–∞—Ç–∏",
        "instruction": "–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –ü–æ–¥—É–º–∞–π –æ –∫–æ—Ä–Ω–µ—Ä-–∫–µ–π—Å–∞—Ö –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö."
    },
    {
        "bot_name": "üìÖ –õ–µ–Ω–∞",
        "instruction": "–¢—ã –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –ê—Ä—Ç—É—Ä–∞, —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞."
    },
    {
        "bot_name": "üß† –î–µ–Ω–∏—Å",
        "instruction": "–¢—ã –≤–µ–¥—É—â–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –î–∞–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—Ü–µ–Ω–∫—É: –ø–æ—á–µ–º—É –≥–∏–ø–æ—Ç–µ–∑–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–ª–æ—Ö–æ–π, –∑–∞—á–µ–º —ç—Ç–æ –≤–æ–æ–±—â–µ –Ω—É–∂–Ω–æ."
    }
]

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –≤—Å–µ—Ö –±–æ—Ç–æ–≤ ---
def generate_bot_responses(user_prompt: str):
    responses = []
    artur_answer = None

    for bot in bots:
        full_prompt = f"{bot['instruction']}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å: {user_prompt}"

        # –ï—Å–ª–∏ —ç—Ç–æ –õ–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ê—Ä—Ç—É—Ä–∞, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å
        if bot["bot_name"] == "üìÖ –õ–µ–Ω–∞" and artur_answer:
            full_prompt += f"\n\n–û—Ç–≤–µ—Ç –ê—Ä—Ç—É—Ä–∞:\n{artur_answer}"

        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": bot["instruction"]},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.7
        )
        answer = response.choices[0].message.content.strip()

        if bot["bot_name"] == "üë®‚Äçüíª –ê—Ä—Ç—É—Ä":
            artur_answer = answer

        responses.append({
            "bot_name": bot["bot_name"],
            "answer": answer
        })

    return responses

# --- –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ---
@app.route("/", methods=["GET"])
def index():
    return render_template_string("""
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>Product Brainstorm</title>
</head>
<body>
  <h1>üí° –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤—É—é –∏–¥–µ—é</h1>
  <textarea id="idea" rows="4" cols="60" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é –∑–¥–µ—Å—å..."></textarea><br><br>
  <button onclick="sendIdea()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
  <h2>–û—Ç–≤–µ—Ç—ã –±–æ—Ç–æ–≤:</h2>
  <div id="responses"></div>

  <script>
    async function sendIdea() {
      const idea = document.getElementById("idea").value;
      const responseDiv = document.getElementById("responses");
      responseDiv.innerHTML = "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤...";

      const res = await fetch("/submit", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ idea })
      });

      const data = await res.json();
      responseDiv.innerHTML = data.map(bot => `
        <div>
          <strong>${bot.bot_name}</strong>:<br/>
          ${bot.answer}
          <hr/>
        </div>
      `).join("");
    }
  </script>
</body>
</html>
""")

# --- POST –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ---
@app.route("/submit", methods=["POST"])
def submit():
    try:
        data = request.get_json()
        idea = data.get("idea", "").strip()
        if not idea:
            return jsonify({"error": "–ó–∞–ø—Ä–æ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º."}), 400

        responses = generate_bot_responses(idea)
        return jsonify(responses)

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True)
