from flask import Flask, request, jsonify, render_template_string
from openai import OpenAI
import os
import re

app = Flask(__name__)
client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

# --- –ë–æ—Ç—ã ---
bots = [
    {
        "bot_name": "ü§ì –í–∏–∫–∞",
        "instruction": "–¢—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –Ω–∞–π—Ç–∏ –ø–æ–¥–∫—Ä–µ–ø–ª—è—é—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª–∏—Ç —É–ª—É—á—à–∏—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é –≥–∏–ø–æ—Ç–µ–∑—É. –ù–∞–ø—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –≥–∏–ø–æ—Ç–µ–∑–∞ –≤–∫–ª—é—á–∞–µ—Ç –∫–∞–∫–æ–µ-—Ç–æ —É–ª—É—á—à–µ–Ω–∏–µ –∏  –∏–∑–º–µ–Ω–µ–Ω–∏–µ, –ø–æ–∏—Å–∫–∞—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–ª–∏, —á—Ç–æ —Ç–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ö–æ—Ä–æ—à–æ –æ—Ç—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–µ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (—É–∫–∞–∑–∞—Ç—å –∫–∞–∫–∏–µ)"
    },
    {
        "bot_name": "üïµÔ∏è‚Äç‚ôÄÔ∏è –ù–∞—Å—Ç—è",
        "instruction": "–¢—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —ç—Ç–æ–º –ø–æ–Ω–∏–º–∞–Ω–∏–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω–∫—É—Ä–∏—Ä—É—é—â–∏—Ö –∏–ª–∏ –ø–æ—Ö–æ–∂–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, –≥–¥–µ —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ö–æ—Ä–æ—à–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –ö –∫–∞–∂–¥–æ–º—É —Å–µ—Ä–≤–∏—Å—É –¥–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø–æ—á–µ–º—É —Ç—ã —Å—á–∏—Ç–∞–µ—à—å, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–∞–º —Ö–æ—Ä–æ—à–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∏ –µ—Å—Ç—å –ª–∏ —É –Ω–µ—ë –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ–ø–∏—Å—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —Ç–æ –∏–¥–µ–∞–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –ø–æ–Ω—è—Ç–Ω–æ–π –∏ —É–¥–æ–±–Ω–æ–π —Ñ–æ—Ä–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—ã–¥–µ–ª–µ–Ω–µ–º, —á—Ç–æ –≤–æ—Ç –≤ —ç—Ç–æ–º —Å–µ—Ä–≤–∏—Å–µ –µ—Å—Ç—å —Ö–æ—Ä–æ—à–∏–µ UI –Ω–∞—Ö–æ–¥–∫–∏, –≤ —ç—Ç–æ–º - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∞ –≤ —ç—Ç–æ–º —á–∏—Å—Ç—ã–π –∏ –ª–∞–∫–æ–Ω—á–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏ –Ω–∏—á—Ç–æ –Ω–µ –æ—Ç–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    },
    {
        "bot_name": "üë®‚Äçüíª –ê—Ä—Ç—É—Ä",
        "instruction": "–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ª–∏–¥–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –æ—Ü–µ–Ω–∏—Ç—å –µ–≥–æ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Ä–µ–∞–ª–∏–∑—É–µ–º–æ—Å—Ç–∏ –∏ –¥–∞—Ç—å –æ—Ü–µ–Ω–∫—É –ø–æ —Ç—Ä–µ–±—É–µ–º—ã–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ä–µ—Å—É—Ä—Å–∞–º (–Ω—É–∂–Ω—ã –ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –∫–∞–∫–∏—Ö –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è, –Ω—É–∂–Ω—ã –ª–∏ –¥–µ–≤–æ–ø—Å—ã, –¥–∏–∑–∞–π–Ω–µ—Ä—ã, –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Ç–¥). –ï—Å—Ç—å –ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –∫–æ—Ä–Ω–µ—Ä –∫–µ–π—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ–±—ã –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±—ã–ª–æ –ø–æ–ª–Ω—ã–º."
    },
    {
        "bot_name": "üîç –°–≤–∞—Ç–∏",
        "instruction": "–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–æ–¥—É–º–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ—Ä–Ω–µ—Ä –∫–µ–π—Å—ã –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å."
    },
    {
        "bot_name": "üìÖ –õ–µ–Ω–∞",
        "instruction": "–¢—ã –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç—ã –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤ –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–≤–∞ –ø–ª–∞–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–æ–∞–¥–º–∞–ø). –û–¥–∏–Ω –ø–ª–∞–Ω –¥–ª—è MVP –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –≤—Ç–æ—Ä–æ–π —Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏ –∫–æ—Ä–Ω–µ—Ä –∫–µ–π—Å–æ–≤. –í –ø–ª–∞–Ω–∞—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —á–µ–ª–æ–≤–µ–∫–æ—á–∞—Å–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥—Ä—É–≥–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –ø—Ä–∏–≤–ª–µ—á—å."
    },
    {
        "bot_name": "üß† –î–µ–Ω–∏—Å",
        "instruction": "–¢—ã –≤–µ–¥—É—â–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –¥–∞—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –∫—Ä–∏—Ç–∏–∫—É, –∫–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Ç—ã –≤–∏–¥–∏—à—å –≤ —ç—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ, –ø–æ—á–µ–º—É –æ–Ω –ø–ª–æ—Ö–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø–æ—á–µ–º—É –∏–¥–µ—è –Ω–µ–∂–∏–∑–Ω–µ—Å–ø–æ—Å–æ–±–Ω–∞, –ø–æ—á–µ–º—É —Ç–µ–∫—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∏ –±–æ–ª–µ–µ —Ö–æ—Ä–æ—à–µ–µ."
    }
]

@app.route("/", methods=["GET"])
def index():
    return render_template_string("""
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>Product Brainstorm</title>
  <style>
    body {
      background-color: #f7f7f8;
      font-family: 'Segoe UI', sans-serif;
      padding: 40px;
    }
    .container {
      max-width: 800px;
      margin: 0 auto;
      background: #fff;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 0 12px rgba(0,0,0,0.05);
    }
    textarea {
      width: 100%;
      padding: 12px;
      font-size: 16px;
      border-radius: 8px;
      border: 1px solid #ccc;
      margin-bottom: 16px;
    }
    button {
      background-color: #10a37f;
      color: white;
      border: none;
      padding: 12px 24px;
      font-size: 16px;
      border-radius: 8px;
      cursor: pointer;
    }
    button:hover {
      background-color: #0f9774;
    }
    .response {
      background-color: #f0f0f0;
      padding: 16px;
      border-radius: 8px;
      margin-top: 20px;
      white-space: pre-wrap;
    }
    .bot-label {
      font-weight: bold;
      margin-bottom: 6px;
      color: #333;
    }
    .copy-btn {
      background-color: #10a37f;
      color: white;
      border: none;
      padding: 6px 12px;
      font-size: 12px;
      border-radius: 6px;
      cursor: pointer;
      margin-left: 8px;
      vertical-align: middle;
    }
    .copy-btn:hover {
      background-color: #0f9774;
    }
    #copy-all-btn {
      background-color: #10a37f;
      color: white;
      border: none;
      padding: 12px 24px;
      font-size: 16px;
      border-radius: 8px;
      cursor: pointer;
      display: block;
      margin-top: 20px;
      margin-left: auto;
      margin-right: auto;
    }
    #copy-all-btn:hover {
      background-color: #0f9774;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>üí° –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤—É—é –∏–¥–µ—é</h1>
    <textarea id="idea" rows="4" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é –∑–¥–µ—Å—å..."></textarea>
    <button onclick="sendIdea()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>

    <div id="responses"></div>
    <button id="copy-all-btn">Copy All</button>
  </div>

  <script>
    const bots = ["ü§ì –í–∏–∫–∞", "üïµÔ∏è‚Äç‚ôÄÔ∏è –ù–∞—Å—Ç—è", "üë®‚Äçüíª –ê—Ä—Ç—É—Ä", "üîç –°–≤–∞—Ç–∏", "üìÖ –õ–µ–Ω–∞", "üß† –î–µ–Ω–∏—Å"];

    function format(text) {
      // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏ –∞–±–∑–∞—Ü—ã
      const html = text
        .replace(/\\n{2,}/g, '</p><p>')
        .replace(/\\n/g, '<br>')
        .replace(/(\\d+\\.\\s.+?)(?=\\d+\\.\\s|$)/gs, (match) => {
          const items = match.trim().split(/\\n/).map(item => `<li>${item.replace(/^\\d+\\.\\s/, '')}</li>`).join('');
          return `<ol>${items}</ol>`;
        });
      return "<p>" + html + "</p>";
    }

    async function sendIdea() {
      const idea = document.getElementById("idea").value;
      const responseDiv = document.getElementById("responses");
      responseDiv.innerHTML = "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤...";

      responseDiv.innerHTML = "";
      for (const bot of bots) {
        responseDiv.innerHTML += `<div class='response'><div class='bot-label'>${bot}:</div>‚è≥ –ñ–¥–µ–º –æ—Ç–≤–µ—Ç...</div>`;
      }

      for (let i = 0; i < bots.length; i++) {
        const bot = bots[i];
        const res = await fetch("/generate_for_bot", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ idea, bot_id: bot })
        });

        const data = await res.json();
        const responseBlocks = document.querySelectorAll(".response");
        if (data.error) {
          responseBlocks[i].innerHTML = `<div class='bot-label'>${bot}:</div>‚ùå –û—à–∏–±–∫–∞: ${data.error}`;
        } else {
          responseBlocks[i].innerHTML = `<div class='bot-label'>${data.bot_name}:</div>${format(data.answer)}`;
          const copyButton = document.createElement('button');
          copyButton.innerText = 'Copy';
          copyButton.classList.add('copy-btn');
          // Inline styles removed, will be handled by CSS
          responseBlocks[i].appendChild(copyButton);

          copyButton.addEventListener('click', () => {
            const responseClone = responseBlocks[i].cloneNode(true);
            // Remove the bot label and the button itself from the clone
            responseClone.querySelector('.bot-label').remove();
            responseClone.querySelector('.copy-btn').remove();
            
            const textToCopy = responseClone.innerText.trim();
            navigator.clipboard.writeText(textToCopy).then(() => {
              copyButton.innerText = 'Copied!';
              setTimeout(() => {
                copyButton.innerText = 'Copy';
              }, 2000);
            }).catch(err => {
              console.error('Failed to copy text: ', err);
              // Optionally, provide feedback to the user that copy failed
            });
          });
        }
      }
    }

    function copyAllConversation() {
      const ideaText = document.getElementById("idea").value;
      if (!ideaText && document.querySelectorAll(".response").length === 0) {
        alert("Nothing to copy!");
        return;
      }

      let conversationText = "Initial Idea:\n" + ideaText;
      const responseBlocks = document.querySelectorAll(".response");
      const copyAllBtn = document.getElementById('copy-all-btn');

      responseBlocks.forEach(block => {
        const botLabelElement = block.querySelector('.bot-label');
        if (!botLabelElement) return; // Skip if no bot label (e.g. initial loading message)

        const botName = botLabelElement.innerText.replace(':', '').trim();
        
        // Clone the block to safely remove elements for text extraction
        const blockClone = block.cloneNode(true);
        blockClone.querySelector('.bot-label').remove();
        const copyBtnInClone = blockClone.querySelector('.copy-btn');
        if (copyBtnInClone) {
          copyBtnInClone.remove();
        }
        
        // Handle cases where response might just be the "‚è≥ –ñ–¥–µ–º –æ—Ç–≤–µ—Ç..."
        const answerText = blockClone.innerText.trim();
        if (answerText === "‚è≥ –ñ–¥–µ–º –æ—Ç–≤–µ—Ç..." || answerText === "" || answerText.startsWith("‚ùå –û—à–∏–±–∫–∞:")) {
            conversationText += `\n\n${botName}:\n${answerText}`;
        } else {
            conversationText += `\n\n${botName}:\n${answerText}`;
        }
      });

      navigator.clipboard.writeText(conversationText).then(() => {
        const originalText = copyAllBtn.innerText;
        copyAllBtn.innerText = 'Copied All!';
        setTimeout(() => {
          copyAllBtn.innerText = originalText;
        }, 2000);
      }).catch(err => {
        console.error('Failed to copy all text: ', err);
        alert('Failed to copy conversation.');
      });
    }
    
    // Setup event listener for the copy all button
    // Ensure the button is present in the DOM before attaching listener
    // One way is to put this script at the end of body or use DOMContentLoaded
    // For this template string, it's fine as is because script runs after HTML.
    // However, to be super safe, especially if script was in <head>:
    // document.addEventListener('DOMContentLoaded', () => {
    //  const copyAllBtn = document.getElementById('copy-all-btn');
    //  if(copyAllBtn) {
    //    copyAllBtn.onclick = copyAllConversation;
    //  }
    // });
    // Simplified for now as the button is defined before this part of the script.
    // Wait for the DOM to be fully loaded before attaching event listeners
    // This is a more robust way
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            const btn = document.getElementById('copy-all-btn');
            if(btn) btn.onclick = copyAllConversation;
        });
    } else {
        // DOMContentLoaded has already fired
        const btn = document.getElementById('copy-all-btn');
        if(btn) btn.onclick = copyAllConversation;
    }
  </script>
</body>
</html>
""")

@app.route("/generate_for_bot", methods=["POST"])
def generate_for_bot():
    try:
        data = request.get_json()
        idea = data.get("idea", "").strip()
        bot_id = data.get("bot_id")

        bot = next((b for b in bots if b["bot_name"] == bot_id), None)
        if not bot:
            return jsonify({"error": "Unknown bot"}), 400

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": bot["instruction"]},
                {"role": "user", "content": idea}
            ],
            temperature=0.7
        )

        return jsonify({
            "bot_name": bot["bot_name"],
            "answer": response.choices[0].message.content.strip()
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True)
