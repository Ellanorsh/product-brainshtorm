
from flask import Flask, request, jsonify, render_template_string
from openai import OpenAI
import os

app = Flask(__name__)
client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

# --- –ë–æ—Ç—ã ---
bots = [
    {
        "bot_name": "ü§ì –í–∏–∫–∞",
        "instruction": "–¢—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –Ω–∞–π—Ç–∏ –ø–æ–¥–∫—Ä–µ–ø–ª—è—é—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª–∏—Ç —É–ª—É—á—à–∏—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é –≥–∏–ø–æ—Ç–µ–∑—É. –ù–∞–ø—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –≥–∏–ø–æ—Ç–µ–∑–∞ –≤–∫–ª—é—á–∞–µ—Ç –∫–∞–∫–æ–µ-—Ç–æ —É–ª—É—á—à–µ–Ω–∏–µ –∏  –∏–∑–º–µ–Ω–µ–Ω–∏–µ, –ø–æ–∏—Å–∫–∞—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–ª–∏, —á—Ç–æ —Ç–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ö–æ—Ä–æ—à–æ –æ—Ç—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–µ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (—É–∫–∞–∑–∞—Ç—å –∫–∞–∫–∏–µ)"
    },
    {
        "bot_name": "üïµÔ∏è‚Äç‚ôÄÔ∏è –ù–∞—Å—Ç—è",
        "instruction": "–¢—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —ç—Ç–æ–º –ø–æ–Ω–∏–º–∞–Ω–∏–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω–∫—É—Ä–∏—Ä—É—é—â–∏—Ö –∏–ª–∏ –ø–æ—Ö–æ–∂–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, –≥–¥–µ —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ö–æ—Ä–æ—à–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –ö –∫–∞–∂–¥–æ–º—É —Å–µ—Ä–≤–∏—Å—É –¥–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø–æ—á–µ–º—É —Ç—ã —Å—á–∏—Ç–∞–µ—à—å, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–∞–º —Ö–æ—Ä–æ—à–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∏ –µ—Å—Ç—å –ª–∏ —É –Ω–µ—ë –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏."
    },
    {
        "bot_name": "üë®‚Äçüíª –ê—Ä—Ç—É—Ä",
        "instruction": "–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ª–∏–¥–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –æ—Ü–µ–Ω–∏—Ç—å –µ–≥–æ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Ä–µ–∞–ª–∏–∑—É–µ–º–æ—Å—Ç–∏ –∏ –¥–∞—Ç—å –æ—Ü–µ–Ω–∫—É –ø–æ —Ç—Ä–µ–±—É–µ–º—ã–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ä–µ—Å—É—Ä—Å–∞–º."
    },
    {
        "bot_name": "üîç –°–≤–∞—Ç–∏",
        "instruction": "–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–æ–¥—É–º–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ—Ä–Ω–µ—Ä –∫–µ–π—Å—ã –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å."
    },
    {
        "bot_name": "üìÖ –õ–µ–Ω–∞",
        "instruction": "–¢—ã –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç—ã –ê—Ä—Ç—É—Ä–∞, –ù–∞—Å—Ç–∏ –∏ –°–≤–∞—Ç–∏ –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–≤–∞ –ø–ª–∞–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞ (MVP –∏ –ø–æ–ª–Ω—ã–π)."
    },
    {
        "bot_name": "üß† –î–µ–Ω–∏—Å",
        "instruction": "–¢—ã –≤–µ–¥—É—â–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –¥–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∫—Ä–∏—Ç–∏–∫—É, –ø–æ—á–µ–º—É –≥–∏–ø–æ—Ç–µ–∑–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–ª–æ—Ö–æ–π, –Ω–µ–Ω—É–∂–Ω–æ–π –∏–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ª—É—á—à–µ."
    }
]

@app.route("/")
def index():
    return render_template_string("""<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>Product Brainstorm</title>
  <style>
    body { font-family: Arial, sans-serif; background: #f4f4f4; margin: 0; padding: 2rem; }
    .container { max-width: 800px; margin: 0 auto; background: white; padding: 2rem; border-radius: 8px; }
    .bot-block { margin-bottom: 2rem; padding: 1rem; background: #f9f9f9; border-left: 4px solid #ccc; border-radius: 4px; position: relative; }
    .bot-name { font-weight: bold; margin-bottom: 0.5rem; }
    .copy-btn { position: absolute; top: 1rem; right: 1rem; background: #eee; border: none; padding: 5px 10px; cursor: pointer; }
    .copy-btn:hover { background: #ddd; }
    #copy-all { margin-top: 1rem; background: #007bff; color: white; border: none; padding: 10px 20px; cursor: pointer; border-radius: 4px; }
    #copy-all:hover { background: #0056b3; }
  </style>
</head>
<body>
  <div class="container">
    <h1>üí° –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤—É—é –∏–¥–µ—é</h1>
    <textarea id="idea" rows="4" style="width:100%;" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é –∑–¥–µ—Å—å..."></textarea><br><br>
    <button onclick="sendIdea()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
    <h2>–û—Ç–≤–µ—Ç—ã –±–æ—Ç–æ–≤:</h2>
    <div id="responses"></div>
    <button id="copy-all" style="display:none;" onclick="copyAll()">üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë</button>
  </div>

<script>
  const bots = {{ bots|tojson }};
  let allAnswers = [];

  async function sendIdea() {
    const idea = document.getElementById("idea").value.trim();
    const responseDiv = document.getElementById("responses");
    const copyAllBtn = document.getElementById("copy-all");
    allAnswers = [];

    if (!idea) {
      alert("–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ—é.");
      return;
    }

    responseDiv.innerHTML = "";
    copyAllBtn.style.display = "none";

    for (let i = 0; i < bots.length; i++) {
      const bot = bots[i];
      const botBlock = document.createElement("div");
      botBlock.className = "bot-block";
      botBlock.innerHTML = \`
        <div class="bot-name">\${bot.bot_name}</div>
        <pre id="bot-answer-\${i}" style="white-space:pre-wrap;">‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞...</pre>
      \`;
      responseDiv.appendChild(botBlock);

      const res = await fetch("/generate_for_bot", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ idea: idea, bot_id: bot.bot_name })
      });
      const data = await res.json();
      if (data.error) {
        document.getElementById("bot-answer-" + i).innerText = "–û—à–∏–±–∫–∞: " + data.error;
      } else {
        document.getElementById("bot-answer-" + i).innerText = data.answer;
        allAnswers.push(\`\${bot.bot_name}:
\${data.answer}\`);
        const btn = document.createElement("button");
        btn.className = "copy-btn";
        btn.innerText = "üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å";
        btn.onclick = () => {
          navigator.clipboard.writeText(\`\${bot.bot_name}:
\${data.answer}\`);
          alert("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!");
        };
        botBlock.appendChild(btn);
      }

      if (i === bots.length - 1) {
        copyAllBtn.style.display = "inline-block";
      }
    }
  }

  function copyAll() {
    const idea = document.getElementById("idea").value;
    const fullText = "üí° –ó–∞–ø—Ä–æ—Å:\n" + idea + "\n\n" + allAnswers.join("\n\n");
    navigator.clipboard.writeText(fullText).then(() => {
      alert("–í—Å–µ –æ—Ç–≤–µ—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!");
    });
  }
</script>
</body>
</html>""", bots=bots)

@app.route("/generate_for_bot", methods=["POST"])
def generate_for_bot():
    try:
        data = request.get_json()
        idea = data.get("idea", "").strip()
        bot_id = data.get("bot_id")

        bot = next((b for b in bots if b["bot_name"] == bot_id), None)
        if not bot:
            return jsonify({"error": "Unknown bot"}), 400

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": bot["instruction"]},
                {"role": "user", "content": idea}
            ],
            temperature=0.7
        )

        return jsonify({
            "bot_name": bot["bot_name"],
            "answer": response.choices[0].message.content.strip()
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True)
