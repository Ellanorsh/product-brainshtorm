from flask import Flask, request, jsonify, render_template_string
from openai import OpenAI
import os
import traceback

app = Flask(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI ---
client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

# --- –ë–æ—Ç—ã ---
bots = [
    {
        "bot_name": "ü§ì –í–∏–∫–∞",
        "instruction": "–¢—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –Ω–∞–π—Ç–∏ –ø–æ–¥–∫—Ä–µ–ø–ª—è—é—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª–∏—Ç —É–ª—É—á—à–∏—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é –≥–∏–ø–æ—Ç–µ–∑—É. –ù–∞–ø—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –≥–∏–ø–æ—Ç–µ–∑–∞ –≤–∫–ª—é—á–∞–µ—Ç –∫–∞–∫–æ–µ-—Ç–æ —É–ª—É—á—à–µ–Ω–∏–µ –∏  –∏–∑–º–µ–Ω–µ–Ω–∏–µ, –ø–æ–∏—Å–∫–∞—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–ª–∏, —á—Ç–æ —Ç–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ö–æ—Ä–æ—à–æ –æ—Ç—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–µ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (—É–∫–∞–∑–∞—Ç—å –∫–∞–∫–∏–µ)"
    },
    {
        "bot_name": "üïµÔ∏è‚Äç‚ôÄÔ∏è –ù–∞—Å—Ç—è",
        "instruction": "–¢—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —ç—Ç–æ–º –ø–æ–Ω–∏–º–∞–Ω–∏–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω–∫—É—Ä–∏—Ä—É—é—â–∏—Ö –∏–ª–∏ –ø–æ—Ö–æ–∂–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, –≥–¥–µ —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ö–æ—Ä–æ—à–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –ö –∫–∞–∂–¥–æ–º—É —Å–µ—Ä–≤–∏—Å—É –¥–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø–æ—á–µ–º—É —Ç—ã —Å—á–∏—Ç–∞–µ—à—å, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–∞–º —Ö–æ—Ä–æ—à–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∏ –µ—Å—Ç—å –ª–∏ —É –Ω–µ—ë –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ–ø–∏—Å—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —Ç–æ –∏–¥–µ–∞–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –ø–æ–Ω—è—Ç–Ω–æ–π –∏ —É–¥–æ–±–Ω–æ–π —Ñ–æ—Ä–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—ã–¥–µ–ª–µ–Ω–µ–º, —á—Ç–æ –≤–æ—Ç –≤ —ç—Ç–æ–º —Å–µ—Ä–≤–∏—Å–µ –µ—Å—Ç—å —Ö–æ—Ä–æ—à–∏–µ UI –Ω–∞—Ö–æ–¥–∫–∏, –≤ —ç—Ç–æ–º - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∞ –≤ —ç—Ç–æ–º —á–∏—Å—Ç—ã–π –∏ –ª–∞–∫–æ–Ω—á–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏ –Ω–∏—á—Ç–æ –Ω–µ –æ—Ç–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    },
    {
        "bot_name": "üë®‚Äçüíª –ê—Ä—Ç—É—Ä",
        "instruction": "–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ª–∏–¥–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –æ—Ü–µ–Ω–∏—Ç—å –µ–≥–æ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Ä–µ–∞–ª–∏–∑—É–µ–º–æ—Å—Ç–∏ –∏ –¥–∞—Ç—å –æ—Ü–µ–Ω–∫—É –ø–æ —Ç—Ä–µ–±—É–µ–º—ã–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ä–µ—Å—É—Ä—Å–∞–º (–Ω—É–∂–Ω—ã –ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –∫–∞–∫–∏—Ö –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è, –Ω—É–∂–Ω—ã –ª–∏ –¥–µ–≤–æ–ø—Å—ã, –¥–∏–∑–∞–π–Ω–µ—Ä—ã, –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Ç–¥). –ï—Å—Ç—å –ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –∫–æ—Ä–Ω–µ—Ä –∫–µ–π—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ–±—ã –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±—ã–ª–æ –ø–æ–ª–Ω—ã–º."
    },
    {
        "bot_name": "üîç –°–≤–∞—Ç–∏",
        "instruction": "–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –ü–æ–¥—É–º–∞–π –æ –∫–æ—Ä–Ω–µ—Ä-–∫–µ–π—Å–∞—Ö –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö."
    },
    {
        "bot_name": "üìÖ –õ–µ–Ω–∞",
        "instruction": "–¢—ã –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç—ã –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤ –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–≤–∞ –ø–ª–∞–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–æ–∞–¥–º–∞–ø). –û–¥–∏–Ω –ø–ª–∞–Ω –¥–ª—è MVP –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –≤—Ç–æ—Ä–æ–π —Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏ –∫–æ—Ä–Ω–µ—Ä –∫–µ–π—Å–æ–≤. –í –ø–ª–∞–Ω–∞—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —á–µ–ª–æ–≤–µ–∫–æ—á–∞—Å–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥—Ä—É–≥–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –ø—Ä–∏–≤–ª–µ—á—å."
    },
    {
        "bot_name": "üß† –î–µ–Ω–∏—Å",
        "instruction": "–¢—ã –≤–µ–¥—É—â–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –î–∞–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—Ü–µ–Ω–∫—É: –ø–æ—á–µ–º—É –≥–∏–ø–æ—Ç–µ–∑–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–ª–æ—Ö–æ–π, –∑–∞—á–µ–º —ç—Ç–æ –≤–æ–æ–±—â–µ –Ω—É–∂–Ω–æ."
    }
]

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ ---
def generate_bot_responses(user_prompt: str):
    responses = []
    artur_answer = None

    for bot in bots:
        print(f"üü° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç {bot['bot_name']}")
        full_prompt = f"{bot['instruction']}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å: {user_prompt}"

        if bot["bot_name"] == "üìÖ –õ–µ–Ω–∞" and artur_answer:
            full_prompt += f"\n\n–û—Ç–≤–µ—Ç –ê—Ä—Ç—É—Ä–∞:\n{artur_answer}"

        try:
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": bot["instruction"]},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0.7
            )
            answer = response.choices[0].message.content.strip()

            if bot["bot_name"] == "üë®‚Äçüíª –ê—Ä—Ç—É—Ä":
                artur_answer = answer

            responses.append({
                "bot_name": bot["bot_name"],
                "answer": answer
            })

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É {bot['bot_name']}: {e}")
            traceback.print_exc()
            responses.append({
                "bot_name": bot["bot_name"],
                "answer": f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"
            })

    return responses

# --- –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ---
@app.route("/", methods=["GET"])
def index():
    return render_template_string("""
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>Product Brainstorm</title>
</head>
<body>
  <h1>üí° –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤—É—é –∏–¥–µ—é</h1>
  <textarea id="idea" rows="4" cols="60" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é –∑–¥–µ—Å—å..."></textarea><br><br>
  <button onclick="sendIdea()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
  <h2>–û—Ç–≤–µ—Ç—ã –±–æ—Ç–æ–≤:</h2>
  <div id="responses"></div>

  <script>
    async function sendIdea() {
      const idea = document.getElementById("idea").value;
      const responseDiv = document.getElementById("responses");
      responseDiv.innerHTML = "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤...";

      const res = await fetch("/submit", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ idea })
      });

      const data = await res.json();
      if (data.error) {
        responseDiv.innerHTML = "‚ùå –û—à–∏–±–∫–∞: " + data.error;
        return;
      }

      responseDiv.innerHTML = data.map(bot => `
        <div>
          <strong>${bot.bot_name}</strong>:<br/>
          ${bot.answer}
          <hr/>
        </div>
      `).join("");
    }
  </script>
</body>
</html>
""")

# --- POST: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π ---
@app.route("/submit", methods=["POST"])
def submit():
    try:
        data = request.get_json()
        idea = data.get("idea", "").strip()
        print("üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:", idea)

        if not idea:
            return jsonify({"error": "–ü–æ–ª–µ –∏–¥–µ–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ."}), 400

        results = generate_bot_responses(idea)
        print("‚úÖ –û—Ç–≤–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        return jsonify(results)

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ submit:", e)
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500


if __name__ == "__main__":
    app.run(debug=True)
