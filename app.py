from flask import Flask, request, jsonify, render_template_string
from openai import OpenAI
import os
import re

app = Flask(__name__)
client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

# --- –ë–æ—Ç—ã ---
bots = [
    {
        "bot_name": "ü§ì –í–∏–∫–∞",
        "instruction": "–¢—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –Ω–∞–π—Ç–∏ –ø–æ–¥–∫—Ä–µ–ø–ª—è—é—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª–∏—Ç —É–ª—É—á—à–∏—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é –≥–∏–ø–æ—Ç–µ–∑—É..."
    },
    {
        "bot_name": "üïµÔ∏è‚Äç‚ôÄÔ∏è –ù–∞—Å—Ç—è",
        "instruction": "–¢—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è..."
    },
    {
        "bot_name": "üë®‚Äçüíª –ê—Ä—Ç—É—Ä",
        "instruction": "–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ª–∏–¥–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –æ—Ü–µ–Ω–∏—Ç—å –µ–≥–æ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Ä–µ–∞–ª–∏–∑—É–µ–º–æ—Å—Ç–∏..."
    },
    {
        "bot_name": "üîç –°–≤–∞—Ç–∏",
        "instruction": "–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–æ–¥—É–º–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ—Ä–Ω–µ—Ä –∫–µ–π—Å—ã..."
    },
    {
        "bot_name": "üìÖ –õ–µ–Ω–∞",
        "instruction": "–¢—ã –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç—ã –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤ –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–≤–∞ –ø–ª–∞–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
    },
    {
        "bot_name": "üß† –î–µ–Ω–∏—Å",
        "instruction": "–¢—ã –≤–µ–¥—É—â–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –¥–∞—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –∫—Ä–∏—Ç–∏–∫—É..."
    }
]

@app.route("/", methods=["GET"])
def index():
    return render_template_string("""
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>Product Brainstorm</title>
  <style>
    body {
      background-color: #f7f7f8;
      font-family: 'Segoe UI', sans-serif;
      padding: 40px;
    }
    .container {
      max-width: 800px;
      margin: 0 auto;
      background: #fff;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 0 12px rgba(0,0,0,0.05);
    }
    textarea {
      width: 100%;
      padding: 12px;
      font-size: 16px;
      border-radius: 8px;
      border: 1px solid #ccc;
      margin-bottom: 16px;
    }
    button {
      background-color: #10a37f;
      color: white;
      border: none;
      padding: 12px 24px;
      font-size: 16px;
      border-radius: 8px;
      cursor: pointer;
    }
    button:hover {
      background-color: #0f9774;
    }
    .response {
      background-color: #f0f0f0;
      padding: 16px;
      border-radius: 8px;
      margin-top: 20px;
      white-space: pre-wrap;
      position: relative;
    }
    .bot-label {
      font-weight: bold;
      margin-bottom: 6px;
      color: #333;
    }
    .copy-btn {
      position: absolute;
      top: 10px;
      right: 10px;
      background: #e0e0e0;
      border: none;
      padding: 6px 12px;
      font-size: 14px;
      cursor: pointer;
      border-radius: 6px;
    }
    .copy-btn:hover {
      background: #d5d5d5;
    }
    #copy-all {
      margin-top: 20px;
      background: #007bff;
    }
    #copy-all:hover {
      background: #0056b3;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>üí° –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤—É—é –∏–¥–µ—é</h1>
    <textarea id="idea" rows="4" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é –∑–¥–µ—Å—å..."></textarea>
    <button onclick="sendIdea()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>

    <div id="responses"></div>
    <button id="copy-all" style="display:none;" onclick="copyAll()">üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë</button>
  </div>

  <script>
    const bots = ["ü§ì –í–∏–∫–∞", "üïµÔ∏è‚Äç‚ôÄÔ∏è –ù–∞—Å—Ç—è", "üë®‚Äçüíª –ê—Ä—Ç—É—Ä", "üîç –°–≤–∞—Ç–∏", "üìÖ –õ–µ–Ω–∞", "üß† –î–µ–Ω–∏—Å"];
    let fullText = "";

    function format(text) {
      const html = text
        .replace(/\\n{2,}/g, '</p><p>')
        .replace(/\\n/g, '<br>')
        .replace(/(\\d+\\.\\s.+?)(?=\\d+\\.\\s|$)/gs, (match) => {
          const items = match.trim().split(/\\n/).map(item => `<li>${item.replace(/^\\d+\\.\\s/, '')}</li>`).join('');
          return `<ol>${items}</ol>`;
        });
      return "<p>" + html + "</p>";
    }

    async function sendIdea() {
      const idea = document.getElementById("idea").value;
      const responseDiv = document.getElementById("responses");
      const copyAllBtn = document.getElementById("copy-all");
      responseDiv.innerHTML = "";
      fullText = `üí° –ó–∞–ø—Ä–æ—Å:\n${idea}\n\n`;
      copyAllBtn.style.display = "none";

      for (const bot of bots) {
        const block = document.createElement("div");
        block.className = "response";
        block.innerHTML = `<div class='bot-label'>${bot}:</div><div class='content'>‚è≥ –ñ–¥–µ–º –æ—Ç–≤–µ—Ç...</div>`;
        responseDiv.appendChild(block);
      }

      const blocks = document.querySelectorAll(".response");

      for (let i = 0; i < bots.length; i++) {
        const bot = bots[i];
        const block = blocks[i].querySelector(".content");

        try {
          const res = await fetch("/generate_for_bot", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ idea, bot_id: bot })
          });

          const data = await res.json();
          if (data.error) {
            block.innerHTML = `‚ùå –û—à–∏–±–∫–∞: ${data.error}`;
          } else {
            block.innerHTML = format(data.answer);

            const plainText = `${bot}:\n${data.answer}\n\n`;
            fullText += plainText;

            const copyBtn = document.createElement("button");
            copyBtn.className = "copy-btn";
            copyBtn.textContent = "üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å";
            copyBtn.onclick = () => {
              navigator.clipboard.writeText(`${bot}:\n${data.answer}`).then(() =>
                alert("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!")
              );
            };
            blocks[i].appendChild(copyBtn);
          }
        } catch (err) {
          block.innerHTML = "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞";
        }
      }

      window.fullCopyText = fullText.trim();
      copyAllBtn.style.display = "inline-block";
    }

    function copyAll() {
      navigator.clipboard.writeText(window.fullCopyText).then(() =>
        alert("–í—Å–µ –æ—Ç–≤–µ—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!")
      );
    }
  </script>
</body>
</html>

@app.route("/generate_for_bot", methods=["POST"])
def generate_for_bot():
    try:
        data = request.get_json()
        idea = data.get("idea", "").strip()
        bot_id = data.get("bot_id")

        bot = next((b for b in bots if b["bot_name"] == bot_id), None)
        if not bot:
            return jsonify({"error": "Unknown bot"}), 400

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": bot["instruction"]},
                {"role": "user", "content": idea}
            ],
            temperature=0.7
        )

        return jsonify({
            "bot_name": bot["bot_name"],
            "answer": response.choices[0].message.content.strip()
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True)
